datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  role      Role      @default(USER)
  username  String    @unique
  email     String    @unique
  password  String
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId Int?
  score     Int       @default(0)
  coupons   Coupon[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id               Int              @id @default(autoincrement())
  user             User?
  firstName        String
  lastName         String
  bio              String           @default("")
  profilePicture   PublicFile?      @relation(fields: [profilePictureId], references: [id])
  profilePictureId Int?
  socialLinks      UserSocialLink[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
}

model UserSocialLink {
  id        Int       @id @default(autoincrement())
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Shop {
  id        Int         @id @default(autoincrement())
  uuid      String      @unique
  name      String
  logo      PublicFile? @relation(fields: [logoId], references: [id])
  logoId    Int?
  public    Boolean     @default(false)
  discounts Discount[]
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
}

model Category {
  id        Int        @id @default(autoincrement())
  uuid      String     @unique
  name      String
  discounts Discount[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model Discount {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique
  name         String
  coupons      Coupon[]
  max          Int?
  parts        Int       @default(0)
  validFrom    DateTime?
  validTo      DateTime?
  validTime    Int?
  category     Category? @relation(fields: [categoryUuid], references: [uuid])
  categoryUuid String?
  shop         Shop      @relation(fields: [shopId], references: [id])
  shopId       Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model Coupon {
  id           Int       @id @default(autoincrement())
  public       Boolean   @default(false)
  validTo      DateTime?
  discount     Discount  @relation(fields: [discountUuid], references: [uuid])
  discountUuid String
  user         User?     @relation(fields: [userId], references: [id])
  userId       Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model PublicFile {
  id        Int       @id @default(autoincrement())
  url       String
  key       String    @unique
  Profile   Profile[]
  Shop      Shop[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
