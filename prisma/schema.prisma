datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  username  String    @unique
  email     String    @unique
  password  String
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId Int?
  coupons   Coupon[]
}

model Profile {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
  user        User?
  firstName   String
  lastName    String
  bio         String           @default("")
  socialLinks UserSocialLink[]
}

model UserSocialLink {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId Int?
}

model Shop {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  name      String     @unique
  discounts Discount[]
}

model Category {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  name      String
  discounts Discount[]
}

model Discount {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  coupons    Coupon[]
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  shop       Shop      @relation(fields: [shopId], references: [id])
  shopId     Int
}

model Coupon {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  discount   Discount  @relation(fields: [discountId], references: [id])
  discountId Int
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
}

model PublicFile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  url       String
  key       String    @unique
}
