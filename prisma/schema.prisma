datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      Int                  @id @default(autoincrement())
  role                    Role                 @default(USER)
  username                String               @unique
  email                   String               @unique
  password                String
  forgotPasswordToken     String?
  plan                    Plan                 @default(NORMAL)
  profile                 Profile?             @relation(fields: [profileId], references: [id])
  profileId               Int?                 @unique
  emailConfirmed          Boolean              @default(false)
  emailConfirmationSentAt DateTime?
  ageConfirmed            Boolean              @default(false)
  birthDate               DateTime?
  emso                    String?              @unique
  score                   Int                  @default(0)
  lastDaily               DateTime             @default(now())
  coupons                 Coupon[]
  dailySessionUuid        String?
  dailySession            DailySession?        @relation
  dailyDiscounts          DailyDiscountCount[]
  createdAt               DateTime             @default(now())
  updatedAt               DateTime?            @updatedAt
}

enum Role {
  USER
  EDITOR
  ADMIN
}

enum Plan {
  NORMAL
  STUDENT
}

model Profile {
  id               Int              @id @default(autoincrement())
  user             User?
  firstName        String
  lastName         String
  bio              String           @default("")
  profilePicture   PublicFile?      @relation(fields: [profilePictureId], references: [id])
  profilePictureId Int?
  socialLinks      UserSocialLink[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
}

model UserSocialLink {
  id        Int       @id @default(autoincrement())
  profile   Profile?  @relation(fields: [profileId], references: [id])
  profileId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Shop {
  id        Int         @id @default(autoincrement())
  uuid      String      @unique
  name      String
  logo      PublicFile? @relation(fields: [logoId], references: [id])
  logoId    Int?
  public    Boolean     @default(false)
  discounts Discount[]
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
}

model Category {
  id        Int        @id @default(autoincrement())
  uuid      String     @unique
  name      String
  discounts Discount[]

  background   PublicFile? @relation(fields: [backgroundId], references: [id])
  backgroundId Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum CouponType {
  BARCODE
  CODE
  URL
}

enum DiscountType {
  GENERATE
  CLAIM
}

model Discount {
  id               Int                @id @unique @default(autoincrement())
  uuid             String             @unique @default("")
  name             String
  description      String             @default("")
  thumbnail        PublicFile?        @relation("thumbnail", fields: [thumbnailId], references: [id])
  thumbnailId      Int?
  image            PublicFile?        @relation("image", fields: [imageId], references: [id])
  imageId          Int?
  category         Category?          @relation(fields: [categoryUuid], references: [uuid])
  categoryUuid     String?
  shop             Shop               @relation(fields: [shopId], references: [id])
  shopId           Int
  coupons          Coupon[]
  couponType       CouponType         @default(CODE)
  discountType     DiscountType       @default(CLAIM)
  maxPerUser       Int?               @default(1)
  max              Int?
  parts            Int                @default(1)
  public           Boolean            @default(false)
  ageLimit         Boolean            @default(false)
  validFrom        DateTime?
  validTo          DateTime?
  validTime        Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  DailyDiscountMap DailyDiscountMap[]
}

model Coupon {
  id           Int       @id @unique @default(autoincrement())
  code         String
  public       Boolean   @default(false)
  used         Boolean   @default(false)
  validTo      DateTime?
  discount     Discount  @relation(fields: [discountUuid], references: [uuid])
  discountUuid String
  user         User?     @relation(fields: [userId], references: [id])
  userId       Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model PublicFile {
  id                Int                @id @default(autoincrement())
  url               String
  key               String             @unique
  profile           Profile[]
  shop              Shop[]
  post              Post[]
  discountImage     Discount[]         @relation("image")
  discountThumbnail Discount[]         @relation("thumbnail")
  comingSoon        ComingSoon[]
  category          Category[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  DailyDiscountMap  DailyDiscountMap[]
}

model PrivateFile {
  id        Int      @id @default(autoincrement())
  url       String
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Config {
  key   String @unique
  value String
}

model DailySession {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int      @unique
  shopIds   Int[]
  createdAt DateTime @default(now())
}

model Post {
  id      Int         @id @default(autoincrement())
  url     String?
  image   PublicFile? @relation(fields: [imageId], references: [id])
  imageId Int?
  public  Boolean     @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ComingSoon {
  id      Int         @id @default(autoincrement())
  name    String
  image   PublicFile? @relation(fields: [imageId], references: [id])
  imageId Int?
  public  Boolean     @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Daily {
  id   Int    @id @default(autoincrement())
  uuid String @unique

  name String

  dailyDiscountMap DailyDiscountMap[]
  dailyCount       DailyDiscountCount[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model DailyDiscountMap {
  id Int @id @default(autoincrement())

  daily   Daily? @relation(fields: [dailyId], references: [id])
  dailyId Int?

  probability  Int?
  countTrigger Int?

  discount   Discount @relation(fields: [discountId], references: [id])
  discountId Int

  image   PublicFile? @relation(fields: [imageId], references: [id])
  imageId Int?

  title       String?
  description String?

  availableFrom DateTime?
  availableTo   DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model DailyDiscountCount {
  id Int @id @default(autoincrement())

  daily   Daily? @relation(fields: [dailyId], references: [id])
  dailyId Int?
  users   User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
